{"ast":null,"code":"import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nvar StorageStrategies;\n\n(function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n  static isStorageAvailable(storage) {\n    let available = true;\n\n    try {\n      if (typeof storage === 'object') {\n        storage.setItem('test-storage', 'foobar');\n        storage.removeItem('test-storage');\n      } else available = false;\n    } catch (e) {\n      available = false;\n    }\n\n    return available;\n  }\n\n}\n\nfunction noop() {}\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n  static normalize(raw) {\n    raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n    return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n  }\n\n  static isNormalizedKey(key) {\n    return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n  }\n\n  static setPrefix(prefix) {\n    StorageKeyManager.prefix = prefix;\n  }\n\n  static setSeparator(separator) {\n    StorageKeyManager.separator = separator;\n  }\n\n  static setCaseSensitive(enable) {\n    StorageKeyManager.isCaseSensitive = enable;\n  }\n\n  static consumeConfiguration(config) {\n    if ('prefix' in config) this.setPrefix(config.prefix);\n    if ('separator' in config) this.setSeparator(config.separator);\n    if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n  }\n\n}\n\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nclass SyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  retrieve(key) {\n    let value;\n    this.strategy.get(StorageKeyManager.normalize(key)).subscribe(result => value = typeof result === 'undefined' ? null : result);\n    return value;\n  }\n\n  store(key, value) {\n    this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n    return value;\n  }\n\n  clear(key) {\n    if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n  }\n\n  getStrategyName() {\n    return this.strategy.name;\n  }\n\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n\n}\n\nclass AsyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  retrieve(key) {\n    return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(value => typeof value === 'undefined' ? null : value));\n  }\n\n  store(key, value) {\n    return this.strategy.set(StorageKeyManager.normalize(key), value);\n  }\n\n  clear(key) {\n    return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n  }\n\n  getStrategyName() {\n    return this.strategy.name;\n  }\n\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n\n}\n\nclass StrategyCacheService {\n  constructor() {\n    this.caches = {};\n  }\n\n  get(strategyName, key) {\n    return this.getCacheStore(strategyName)[key];\n  }\n\n  set(strategyName, key, value) {\n    this.getCacheStore(strategyName)[key] = value;\n  }\n\n  del(strategyName, key) {\n    delete this.getCacheStore(strategyName)[key];\n  }\n\n  clear(strategyName) {\n    this.caches[strategyName] = {};\n  }\n\n  getCacheStore(strategyName) {\n    if (strategyName in this.caches) return this.caches[strategyName];\n    return this.caches[strategyName] = {};\n  }\n\n}\n\nStrategyCacheService.ɵfac = function StrategyCacheService_Factory(t) {\n  return new (t || StrategyCacheService)();\n};\n\nStrategyCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StrategyCacheService,\n  factory: StrategyCacheService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\n\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\n\nconst LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\n\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\n\nconst SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\n\nclass BaseSyncStorageStrategy {\n  constructor(storage, cache) {\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n\n  get isAvailable() {\n    if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n    return this._isAvailable;\n  }\n\n  get(key) {\n    let data = this.cache.get(this.name, key);\n    if (data !== undefined) return of(data);\n\n    try {\n      const item = this.storage.getItem(key);\n\n      if (item !== null) {\n        data = JSON.parse(item);\n        this.cache.set(this.name, key, data);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n\n    return of(data);\n  }\n\n  set(key, value) {\n    const data = JSON.stringify(value);\n    this.storage.setItem(key, data);\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    this.storage.removeItem(key);\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.storage.clear();\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n\n}\n\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\n\nLocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) {\n  return new (t || LocalStorageStrategy)(i0.ɵɵinject(LOCAL_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n};\n\nLocalStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LocalStorageStrategy,\n  factory: LocalStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCAL_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (event.key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n\n}\n\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\n\nSessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) {\n  return new (t || SessionStorageStrategy)(i0.ɵɵinject(SESSION_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n};\n\nSessionStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SessionStorageStrategy,\n  factory: SessionStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SessionStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SESSION_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass InMemoryStorageStrategy {\n  constructor(cache) {\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n\n  get(key) {\n    return of(this.cache.get(this.name, key));\n  }\n\n  set(key, value) {\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\n\nInMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) {\n  return new (t || InMemoryStorageStrategy)(i0.ɵɵinject(StrategyCacheService));\n};\n\nInMemoryStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InMemoryStorageStrategy,\n  factory: InMemoryStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StrategyCacheService,\n      decorators: [{\n        type: Inject,\n        args: [StrategyCacheService]\n      }]\n    }];\n  }, null);\n})();\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nconst StorageStrategyStubName = 'stub_strategy';\n\nclass StorageStrategyStub {\n  constructor(name) {\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n\n  get isAvailable() {\n    return this._available;\n  }\n\n  get(key) {\n    return of(this.store[key]);\n  }\n\n  set(key, value) {\n    this.store[key] = value;\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    delete this.store[key];\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.store = {};\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nclass StorageStub {\n  constructor() {\n    this.store = {};\n  }\n\n  get length() {\n    return Object.keys(this.store).length;\n  }\n\n  clear() {\n    this.store = {};\n  }\n\n  getItem(key) {\n    return this.store[key] || null;\n  }\n\n  key(index) {\n    return Object.keys(this.store)[index];\n  }\n\n  removeItem(key) {\n    delete this.store[key];\n  }\n\n  setItem(key, value) {\n    this.store[key] = value;\n  }\n\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\n\nclass StrategyIndex {\n  constructor(strategies) {\n    this.strategies = strategies;\n    this.registration$ = new Subject();\n    if (!strategies) strategies = [];\n    this.strategies = strategies.reverse().map((strategy, index, arr) => strategy.name).map((name, index, arr) => arr.indexOf(name) === index ? index : null).filter(index => index !== null).map(index => strategies[index]);\n  }\n\n  static get(name) {\n    if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n    let strategy = this.index[name];\n\n    if (!strategy.isAvailable) {\n      strategy = this.index[StorageStrategies.InMemory];\n    }\n\n    return strategy;\n  }\n\n  static set(name, strategy) {\n    this.index[name] = strategy;\n  }\n\n  static clear(name) {\n    if (name !== undefined) delete this.index[name];else this.index = {};\n  }\n\n  static isStrategyRegistered(name) {\n    return name in this.index;\n  }\n\n  static hasRegistredStrategies() {\n    return Object.keys(this.index).length > 0;\n  }\n\n  getStrategy(name) {\n    return StrategyIndex.get(name);\n  }\n\n  indexStrategies() {\n    this.strategies.forEach(strategy => this.register(strategy.name, strategy));\n  }\n\n  indexStrategy(name, overrideIfExists = false) {\n    if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n    const strategy = this.strategies.find(strategy => strategy.name === name);\n    if (!strategy) throw new Error(InvalidStrategyError);\n    this.register(name, strategy, overrideIfExists);\n    return strategy;\n  }\n\n  register(name, strategy, overrideIfExists = false) {\n    if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n      StrategyIndex.set(name, strategy);\n      this.registration$.next(name);\n    }\n  }\n\n}\n\nStrategyIndex.index = {};\n\nStrategyIndex.ɵfac = function StrategyIndex_Factory(t) {\n  return new (t || StrategyIndex)(i0.ɵɵinject(STORAGE_STRATEGIES, 8));\n};\n\nStrategyIndex.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StrategyIndex,\n  factory: StrategyIndex.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyIndex, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [STORAGE_STRATEGIES]\n      }]\n    }];\n  }, null);\n})();\n\nclass LocalStorageService extends SyncStorage {}\n\nfunction buildService$1(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\n\nconst LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {}\n\nfunction buildService(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\n\nconst SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n  static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n    const rawKey = key || propName;\n    let storageKey;\n    Object.defineProperty(prototype, propName, {\n      get: function () {\n        let value;\n        StrategyIndex.get(strategyName).get(getKey()).subscribe(result => value = result);\n        return value === undefined ? defaultValue : value;\n      },\n      set: function (value) {\n        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n      }\n    });\n\n    function getKey() {\n      if (storageKey !== undefined) return storageKey;\n      return storageKey = StorageKeyManager.normalize(rawKey);\n    }\n  }\n\n}\n\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\n\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\n\nconst Services = [LocalStorageServiceProvider, SessionStorageServiceProvider];\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\n\nfunction appInit(index) {\n  index.indexStrategies();\n  return () => StrategyIndex.index;\n}\n\nclass NgxWebstorageModule {\n  constructor(index, config) {\n    if (config) StorageKeyManager.consumeConfiguration(config);else console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n  }\n\n  static forRoot(config = {}) {\n    return {\n      ngModule: NgxWebstorageModule,\n      providers: [{\n        provide: LIB_CONFIG,\n        useValue: config\n      }, LocalStorageProvider, SessionStorageProvider, ...Services, ...Strategies, {\n        provide: APP_INITIALIZER,\n        useFactory: appInit,\n        deps: [StrategyIndex],\n        multi: true\n      }]\n    };\n  }\n\n}\n\nNgxWebstorageModule.ɵfac = function NgxWebstorageModule_Factory(t) {\n  return new (t || NgxWebstorageModule)(i0.ɵɵinject(StrategyIndex), i0.ɵɵinject(LIB_CONFIG, 8));\n};\n\nNgxWebstorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxWebstorageModule\n});\nNgxWebstorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxWebstorageModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: StrategyIndex\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit };","map":{"version":3,"names":["filter","switchMap","distinctUntilChanged","shareReplay","map","i0","Injectable","InjectionToken","PLATFORM_ID","Inject","Optional","APP_INITIALIZER","NgModule","Subject","of","isPlatformBrowser","StorageStrategies","CompatHelper","isStorageAvailable","storage","available","setItem","removeItem","e","noop","DefaultPrefix","DefaultSeparator","DefaultIsCaseSensitive","StorageKeyManager","normalize","raw","isCaseSensitive","toLowerCase","prefix","separator","isNormalizedKey","key","indexOf","setPrefix","setSeparator","setCaseSensitive","enable","consumeConfiguration","config","caseSensitive","SyncStorage","constructor","strategy","retrieve","value","get","subscribe","result","store","set","clear","undefined","del","getStrategyName","name","observe","keyChanges","pipe","changed","refCount","bufferSize","AsyncStorage","StrategyCacheService","caches","strategyName","getCacheStore","ɵfac","ɵprov","type","args","providedIn","LOCAL_STORAGE","getLocalStorage","window","localStorage","LocalStorageProvider","provide","useFactory","SESSION_STORAGE","getSessionStorage","sessionStorage","SessionStorageProvider","BaseSyncStorageStrategy","cache","isAvailable","_isAvailable","data","item","getItem","JSON","parse","err","console","warn","stringify","next","LocalStorageStrategy","platformId","zone","listenExternalChanges","addEventListener","event","run","storageArea","Local","NgZone","decorators","SessionStorageStrategy","Session","InMemoryStorageStrategy","InMemory","STORAGE_STRATEGIES","Strategies","useClass","multi","StorageStrategyStubName","StorageStrategyStub","_available","StorageStub","length","Object","keys","index","InvalidStrategyError","StrategyIndex","strategies","registration$","reverse","arr","isStrategyRegistered","Error","hasRegistredStrategies","getStrategy","indexStrategies","forEach","register","indexStrategy","overrideIfExists","find","LocalStorageService","buildService$1","LocalStorageServiceProvider","deps","SessionStorageService","buildService","SessionStorageServiceProvider","DecoratorBuilder","buildSyncStrategyDecorator","prototype","propName","defaultValue","rawKey","storageKey","defineProperty","getKey","LocalStorage","SessionStorage","Services","LIB_CONFIG","appInit","NgxWebstorageModule","error","forRoot","ngModule","providers","useValue","ɵmod","ɵinj"],"sources":["/home/ias/2SI/GesMicroservice/gateway/node_modules/ngx-webstorage/fesm2015/ngx-webstorage.mjs"],"sourcesContent":["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n\nvar StorageStrategies;\n(function (StorageStrategies) {\n    StorageStrategies[\"Local\"] = \"local_strategy\";\n    StorageStrategies[\"Session\"] = \"session_strategy\";\n    StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n    static isStorageAvailable(storage) {\n        let available = true;\n        try {\n            if (typeof storage === 'object') {\n                storage.setItem('test-storage', 'foobar');\n                storage.removeItem('test-storage');\n            }\n            else\n                available = false;\n        }\n        catch (e) {\n            available = false;\n        }\n        return available;\n    }\n}\n\nfunction noop() { }\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n    static normalize(raw) {\n        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n    }\n    static isNormalizedKey(key) {\n        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n    static setPrefix(prefix) {\n        StorageKeyManager.prefix = prefix;\n    }\n    static setSeparator(separator) {\n        StorageKeyManager.separator = separator;\n    }\n    static setCaseSensitive(enable) {\n        StorageKeyManager.isCaseSensitive = enable;\n    }\n    static consumeConfiguration(config) {\n        if ('prefix' in config)\n            this.setPrefix(config.prefix);\n        if ('separator' in config)\n            this.setSeparator(config.separator);\n        if ('caseSensitive' in config)\n            this.setCaseSensitive(config.caseSensitive);\n    }\n}\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nclass SyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        let value;\n        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);\n        return value;\n    }\n    store(key, value) {\n        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n        return value;\n    }\n    clear(key) {\n        if (key !== undefined)\n            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);\n        else\n            this.strategy.clear().subscribe(noop);\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({ refCount: true, bufferSize: 1 }));\n    }\n}\n\nclass AsyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map((value) => typeof value === 'undefined' ? null : value));\n    }\n    store(key, value) {\n        return this.strategy.set(StorageKeyManager.normalize(key), value);\n    }\n    clear(key) {\n        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({ refCount: true, bufferSize: 1 }));\n    }\n}\n\nclass StrategyCacheService {\n    constructor() {\n        this.caches = {};\n    }\n    get(strategyName, key) {\n        return this.getCacheStore(strategyName)[key];\n    }\n    set(strategyName, key, value) {\n        this.getCacheStore(strategyName)[key] = value;\n    }\n    del(strategyName, key) {\n        delete this.getCacheStore(strategyName)[key];\n    }\n    clear(strategyName) {\n        this.caches[strategyName] = {};\n    }\n    getCacheStore(strategyName) {\n        if (strategyName in this.caches)\n            return this.caches[strategyName];\n        return this.caches[strategyName] = {};\n    }\n}\nStrategyCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyCacheService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStrategyCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyCacheService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n    return (typeof window !== 'undefined') ? window.localStorage : null;\n}\nconst LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n    return (typeof window !== 'undefined') ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };\n\nclass BaseSyncStorageStrategy {\n    constructor(storage, cache) {\n        this.storage = storage;\n        this.cache = cache;\n        this.keyChanges = new Subject();\n    }\n    get isAvailable() {\n        if (this._isAvailable === undefined)\n            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n        return this._isAvailable;\n    }\n    get(key) {\n        let data = this.cache.get(this.name, key);\n        if (data !== undefined)\n            return of(data);\n        try {\n            const item = this.storage.getItem(key);\n            if (item !== null) {\n                data = JSON.parse(item);\n                this.cache.set(this.name, key, data);\n            }\n        }\n        catch (err) {\n            console.warn(err);\n        }\n        return of(data);\n    }\n    set(key, value) {\n        const data = JSON.stringify(value);\n        this.storage.setItem(key, data);\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.storage.removeItem(key);\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.storage.clear();\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = LocalStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\nLocalStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: LocalStorageStrategy, deps: [{ token: LOCAL_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nLocalStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: LocalStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: LocalStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LOCAL_STORAGE]\n                    }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: i0.NgZone }];\n    } });\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = SessionStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (event.key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\nSessionStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: SessionStorageStrategy, deps: [{ token: SESSION_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nSessionStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: SessionStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: SessionStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [SESSION_STORAGE]\n                    }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: i0.NgZone }];\n    } });\n\nclass InMemoryStorageStrategy {\n    constructor(cache) {\n        this.cache = cache;\n        this.keyChanges = new Subject();\n        this.isAvailable = true;\n        this.name = InMemoryStorageStrategy.strategyName;\n    }\n    get(key) {\n        return of(this.cache.get(this.name, key));\n    }\n    set(key, value) {\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\nInMemoryStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: InMemoryStorageStrategy, deps: [{ token: StrategyCacheService }], target: i0.ɵɵFactoryTarget.Injectable });\nInMemoryStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: InMemoryStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: InMemoryStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: StrategyCacheService, decorators: [{\n                        type: Inject,\n                        args: [StrategyCacheService]\n                    }] }];\n    } });\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [\n    { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },\n];\n\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n    constructor(name) {\n        this.keyChanges = new Subject();\n        this.store = {};\n        this._available = true;\n        this.name = name || StorageStrategyStubName;\n    }\n    get isAvailable() {\n        return this._available;\n    }\n    get(key) {\n        return of(this.store[key]);\n    }\n    set(key, value) {\n        this.store[key] = value;\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        delete this.store[key];\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.store = {};\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass StorageStub {\n    constructor() {\n        this.store = {};\n    }\n    get length() {\n        return Object.keys(this.store).length;\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    key(index) {\n        return Object.keys(this.store)[index];\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n    constructor(strategies) {\n        this.strategies = strategies;\n        this.registration$ = new Subject();\n        if (!strategies)\n            strategies = [];\n        this.strategies = strategies.reverse()\n            .map((strategy, index, arr) => strategy.name)\n            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)\n            .filter((index) => index !== null)\n            .map((index) => strategies[index]);\n    }\n    static get(name) {\n        if (!this.isStrategyRegistered(name))\n            throw Error(InvalidStrategyError);\n        let strategy = this.index[name];\n        if (!strategy.isAvailable) {\n            strategy = this.index[StorageStrategies.InMemory];\n        }\n        return strategy;\n    }\n    static set(name, strategy) {\n        this.index[name] = strategy;\n    }\n    static clear(name) {\n        if (name !== undefined)\n            delete this.index[name];\n        else\n            this.index = {};\n    }\n    static isStrategyRegistered(name) {\n        return name in this.index;\n    }\n    static hasRegistredStrategies() {\n        return Object.keys(this.index).length > 0;\n    }\n    getStrategy(name) {\n        return StrategyIndex.get(name);\n    }\n    indexStrategies() {\n        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));\n    }\n    indexStrategy(name, overrideIfExists = false) {\n        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)\n            return StrategyIndex.get(name);\n        const strategy = this.strategies.find((strategy) => strategy.name === name);\n        if (!strategy)\n            throw new Error(InvalidStrategyError);\n        this.register(name, strategy, overrideIfExists);\n        return strategy;\n    }\n    register(name, strategy, overrideIfExists = false) {\n        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n            StrategyIndex.set(name, strategy);\n            this.registration$.next(name);\n        }\n    }\n}\nStrategyIndex.index = {};\nStrategyIndex.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyIndex, deps: [{ token: STORAGE_STRATEGIES, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nStrategyIndex.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyIndex, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: StrategyIndex, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [STORAGE_STRATEGIES]\n                    }] }];\n    } });\n\nclass LocalStorageService extends SyncStorage {\n}\nfunction buildService$1(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Local);\n    return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n    provide: LocalStorageService,\n    useFactory: buildService$1,\n    deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {\n}\nfunction buildService(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Session);\n    return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n    provide: SessionStorageService,\n    useFactory: buildService,\n    deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n    static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n        const rawKey = key || propName;\n        let storageKey;\n        Object.defineProperty(prototype, propName, {\n            get: function () {\n                let value;\n                StrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);\n                return value === undefined ? defaultValue : value;\n            },\n            set: function (value) {\n                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n            }\n        });\n        function getKey() {\n            if (storageKey !== undefined)\n                return storageKey;\n            return storageKey = StorageKeyManager.normalize(rawKey);\n        }\n    }\n}\n\nfunction LocalStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n    };\n}\nfunction SessionStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n    };\n}\n\nconst Services = [\n    LocalStorageServiceProvider,\n    SessionStorageServiceProvider\n];\n\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nfunction appInit(index) {\n    index.indexStrategies();\n    return () => StrategyIndex.index;\n}\nclass NgxWebstorageModule {\n    constructor(index, config) {\n        if (config)\n            StorageKeyManager.consumeConfiguration(config);\n        else\n            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: NgxWebstorageModule,\n            providers: [\n                {\n                    provide: LIB_CONFIG,\n                    useValue: config,\n                },\n                LocalStorageProvider,\n                SessionStorageProvider,\n                ...Services,\n                ...Strategies,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: appInit,\n                    deps: [StrategyIndex],\n                    multi: true\n                }\n            ]\n        };\n    }\n}\nNgxWebstorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxWebstorageModule, deps: [{ token: StrategyIndex }, { token: LIB_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nNgxWebstorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxWebstorageModule });\nNgxWebstorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxWebstorageModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxWebstorageModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: StrategyIndex }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIB_CONFIG]\n                    }] }];\n    } });\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}