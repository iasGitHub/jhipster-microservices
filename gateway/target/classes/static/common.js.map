{"version":3,"file":"common.js","mappings":"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","sources":["./src/main/webapp/app/config/navigation.constants.ts","./src/main/webapp/app/core/request/request-util.ts","./src/main/webapp/app/core/util/operators.ts","./src/main/webapp/app/entities/gestionReferentiel/entreprise/service/entreprise.service.ts"],"sourcesContent":["export const ASC = 'asc';\nexport const DESC = 'desc';\nexport const SORT = 'sort';\nexport const ITEM_DELETED_EVENT = 'deleted';\nexport const DEFAULT_SORT_DATA = 'defaultSort';\n","import { HttpParams } from '@angular/common/http';\n\nexport const createRequestOption = (req?: any): HttpParams => {\n  let options: HttpParams = new HttpParams();\n\n  if (req) {\n    Object.keys(req).forEach(key => {\n      if (key !== 'sort' && req[key] && req[key] !== '') {\n        options = options.set(key, req[key]);\n      }\n    });\n\n    if (req.sort) {\n      req.sort.forEach((val: string) => {\n        options = options.append('sort', val);\n      });\n    }\n  }\n\n  return options;\n};\n","/*\n * Function used to workaround https://github.com/microsoft/TypeScript/issues/16069\n * es2019 alternative `const filteredArr = myArr.flatMap((x) => x ? x : []);`\n */\nexport function isPresent<T>(t: T | undefined | null | void): t is T {\n  return t !== undefined && t !== null;\n}\n\nexport const filterNaN = (input: number): number => (isNaN(input) ? 0 : input);\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport dayjs from 'dayjs/esm';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { DATE_FORMAT } from 'app/config/input.constants';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IEntreprise, NewEntreprise } from '../entreprise.model';\n\nexport type PartialUpdateEntreprise = Partial<IEntreprise> & Pick<IEntreprise, 'id'>;\n\ntype RestOf<T extends IEntreprise | NewEntreprise> = Omit<T, 'dateCreation'> & {\n  dateCreation?: string | null;\n};\n\nexport type RestEntreprise = RestOf<IEntreprise>;\n\nexport type NewRestEntreprise = RestOf<NewEntreprise>;\n\nexport type PartialUpdateRestEntreprise = RestOf<PartialUpdateEntreprise>;\n\nexport type EntityResponseType = HttpResponse<IEntreprise>;\nexport type EntityArrayResponseType = HttpResponse<IEntreprise[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EntrepriseService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/entreprises', 'gestionreferentiel');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(entreprise: NewEntreprise): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(entreprise);\n    return this.http\n      .post<RestEntreprise>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map(res => this.convertResponseFromServer(res)));\n  }\n\n  update(entreprise: IEntreprise): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(entreprise);\n    return this.http\n      .put<RestEntreprise>(`${this.resourceUrl}/${this.getEntrepriseIdentifier(entreprise)}`, copy, { observe: 'response' })\n      .pipe(map(res => this.convertResponseFromServer(res)));\n  }\n\n  partialUpdate(entreprise: PartialUpdateEntreprise): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(entreprise);\n    return this.http\n      .patch<RestEntreprise>(`${this.resourceUrl}/${this.getEntrepriseIdentifier(entreprise)}`, copy, { observe: 'response' })\n      .pipe(map(res => this.convertResponseFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<RestEntreprise>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map(res => this.convertResponseFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<RestEntreprise[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map(res => this.convertResponseArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  getEntrepriseIdentifier(entreprise: Pick<IEntreprise, 'id'>): number {\n    return entreprise.id;\n  }\n\n  compareEntreprise(o1: Pick<IEntreprise, 'id'> | null, o2: Pick<IEntreprise, 'id'> | null): boolean {\n    return o1 && o2 ? this.getEntrepriseIdentifier(o1) === this.getEntrepriseIdentifier(o2) : o1 === o2;\n  }\n\n  addEntrepriseToCollectionIfMissing<Type extends Pick<IEntreprise, 'id'>>(\n    entrepriseCollection: Type[],\n    ...entreprisesToCheck: (Type | null | undefined)[]\n  ): Type[] {\n    const entreprises: Type[] = entreprisesToCheck.filter(isPresent);\n    if (entreprises.length > 0) {\n      const entrepriseCollectionIdentifiers = entrepriseCollection.map(entrepriseItem => this.getEntrepriseIdentifier(entrepriseItem)!);\n      const entreprisesToAdd = entreprises.filter(entrepriseItem => {\n        const entrepriseIdentifier = this.getEntrepriseIdentifier(entrepriseItem);\n        if (entrepriseCollectionIdentifiers.includes(entrepriseIdentifier)) {\n          return false;\n        }\n        entrepriseCollectionIdentifiers.push(entrepriseIdentifier);\n        return true;\n      });\n      return [...entreprisesToAdd, ...entrepriseCollection];\n    }\n    return entrepriseCollection;\n  }\n\n  protected convertDateFromClient<T extends IEntreprise | NewEntreprise | PartialUpdateEntreprise>(entreprise: T): RestOf<T> {\n    return {\n      ...entreprise,\n      dateCreation: entreprise.dateCreation?.format(DATE_FORMAT) ?? null,\n    };\n  }\n\n  protected convertDateFromServer(restEntreprise: RestEntreprise): IEntreprise {\n    return {\n      ...restEntreprise,\n      dateCreation: restEntreprise.dateCreation ? dayjs(restEntreprise.dateCreation) : undefined,\n    };\n  }\n\n  protected convertResponseFromServer(res: HttpResponse<RestEntreprise>): HttpResponse<IEntreprise> {\n    return res.clone({\n      body: res.body ? this.convertDateFromServer(res.body) : null,\n    });\n  }\n\n  protected convertResponseArrayFromServer(res: HttpResponse<RestEntreprise[]>): HttpResponse<IEntreprise[]> {\n    return res.clone({\n      body: res.body ? res.body.map(item => this.convertDateFromServer(item)) : null,\n    });\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}