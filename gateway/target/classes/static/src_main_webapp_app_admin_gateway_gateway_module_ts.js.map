{"version":3,"file":"src_main_webapp_app_admin_gateway_gateway_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/admin/gateway/gateway-routes.service.ts","./src/main/webapp/app/admin/gateway/gateway.component.ts","./src/main/webapp/app/admin/gateway/gateway.component.html","./src/main/webapp/app/admin/gateway/gateway.module.ts","./src/main/webapp/app/admin/gateway/gateway.route.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { GatewayRoute } from './gateway-route.model';\n\n@Injectable()\nexport class GatewayRoutesService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  findAll(): Observable<GatewayRoute[]> {\n    return this.http.get<GatewayRoute[]>(this.applicationConfigService.getEndpointFor('api/gateway/routes/'));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { GatewayRoutesService } from './gateway-routes.service';\nimport { GatewayRoute } from './gateway-route.model';\n\n@Component({\n  selector: 'jhi-gateway',\n  templateUrl: './gateway.component.html',\n  providers: [GatewayRoutesService],\n})\nexport class GatewayComponent implements OnInit {\n  gatewayRoutes: GatewayRoute[] = [];\n  updatingRoutes = false;\n\n  constructor(private gatewayRoutesService: GatewayRoutesService) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  refresh(): void {\n    this.updatingRoutes = true;\n    this.gatewayRoutesService.findAll().subscribe(gatewayRoutes => {\n      this.gatewayRoutes = gatewayRoutes;\n      this.updatingRoutes = false;\n    });\n  }\n}\n","<div>\n  <h2>\n    <span id=\"gateway-page-heading\" jhiTranslate=\"gateway.title\">Gateway</span>\n\n    <button class=\"btn btn-primary float-end\" (click)=\"refresh()\" (disabled)=\"(updatingRoutes)\">\n      <fa-icon icon=\"sync\"></fa-icon> <span jhiTranslate=\"gateway.refresh.button\">Rafra√Æchir</span>\n    </button>\n  </h2>\n\n  <h3 jhiTranslate=\"gateway.routes.title\">Routes actuelles</h3>\n\n  <div class=\"table-responsive\">\n    <table class=\"table table-striped\" aria-describedby=\"gateway-page-heading\">\n      <thead>\n        <tr>\n          <th scope=\"col\" jhiTranslate=\"gateway.routes.url\">URL</th>\n          <th scope=\"col\" jhiTranslate=\"gateway.routes.service\">Service</th>\n          <th scope=\"col\" jhiTranslate=\"gateway.routes.servers\">Serveurs disponibles</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let route of gatewayRoutes\">\n          <td>{{ route.path }}</td>\n          <td>{{ route.serviceId }}</td>\n          <td>\n            <div *ngIf=\"route.serviceInstances.length === 0\" class=\"label label-danger\" jhiTranslate=\"gateway.routes.error\">\n              Attention : aucun serveur disponible !\n            </div>\n\n            <div class=\"table-responsive\">\n              <table class=\"table table-striped\" *ngIf=\"route\">\n                <tr *ngFor=\"let instance of route.serviceInstances\">\n                  <td>\n                    <a href=\"{{ instance.uri }}\" target=\"_blank\">{{ instance.uri }}</a>\n                  </td>\n                  <td>\n                    <div *ngIf=\"instance.instanceInfo\" class=\"badge bg-{{ instance.instanceInfo.status === 'UP' ? 'success' : 'danger' }}\">\n                      {{ instance.instanceInfo.status }}\n                    </div>\n                    <div *ngIf=\"!instance.instanceInfo\" class=\"badge bg-warning\">?</div>\n                  </td>\n                  <td>\n                    <span *ngFor=\"let entry of instance.metadata | keyvalue\">\n                      <span class=\"badge bg-default fw-normal\">\n                        <span class=\"badge rounded-pill bg-info fw-normal\">{{ entry.key }}</span>\n                        {{ entry.value }}\n                      </span>\n                    </span>\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/shared/shared.module';\n\nimport { GatewayComponent } from './gateway.component';\nimport { gatewayRoute } from './gateway.route';\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild([gatewayRoute])],\n  declarations: [GatewayComponent],\n})\nexport class GatewayModule {}\n","import { Route } from '@angular/router';\n\nimport { GatewayComponent } from './gateway.component';\n\nexport const gatewayRoute: Route = {\n  path: '',\n  component: GatewayComponent,\n  data: {\n    pageTitle: 'gateway.title',\n  },\n};\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}